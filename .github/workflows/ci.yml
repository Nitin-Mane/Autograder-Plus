name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  python:
    name: Lint • Typecheck • Tests (Python ${{ matrix.python }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f "pyproject.toml" ]; then
            pip install -e .[dev] || pip install -e .
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          # tools (safe if already in extras)
          pip install ruff mypy pytest

      - name: Lint (ruff)
        run: ruff check .

      - name: Typecheck (mypy)
        run: mypy .

      - name: Run tests (pytest)
        env:
          # set any vars your code expects; keep harmless defaults for PRs
          AGP_LEVEL: full
        run: pytest -q

  docker-integration:
    name: Docker Integration (smoke)
    runs-on: ubuntu-latest
    needs: python
    if: ${{ github.event_name != 'pull_request' }}  # skip on PRs unless you prefer to run it
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        if: hashFiles('Dockerfile') != ''
        run: docker build -t autograder-plus:ci .

      - name: Smoke test container
        if: hashFiles('Dockerfile') != ''
        run: |
          docker run --rm autograder-plus:ci python -V
